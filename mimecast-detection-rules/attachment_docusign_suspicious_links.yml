attack_types:
- Credential Phishing
description: Detects DocuSign phishing messages with no DocuSign links, a DocuSign
  logo or verbage within an image or PDF attachment, from an untrusted sender.
detection_methods:
- Computer Vision
- Content analysis
- Header analysis
- Natural Language Understanding
- Optical Character Recognition
- Sender analysis
- URL screenshot
id: 814a5694-d626-5bf4-a1ba-a1dbcb625279
name: 'Brand impersonation: DocuSign branded attachment lure with no DocuSign links'
severity: high
source: "type.inbound\nand (\n  (\n    0 < length(attachments) <= 8\n    and length(filter(attachments,\
  \ .file_type in $file_types_images)) > 0\n  )\n  or (\n    length(attachments) >\
  \ 0\n    and all(attachments,\n            .file_type in $file_types_images or .file_type\
  \ == 'pdf'\n    )\n  )\n)\nand (\n  // if there are links, ensure they are not docusign\
  \ links\n  (\n    length(body.links) != 0\n    and any(body.links,\n           \
  \ not strings.ilike(.href_url.domain.root_domain, \"docusign.*\")\n    )\n  )\n\
  \  // sometimes there are no body links and it's all in the PDF attachment\n  or\
  \ length(body.links) == 0\n)\nand (\n  // check the image or pdf attachments for\
  \ Docusign\n  any(filter(attachments,\n             .file_type in $file_types_images\
  \ or .file_type == 'pdf'\n      ),\n      (\n        any(ml.logo_detect(.).brands,\
  \ .name == \"DocuSign\")\n        or any(file.explode(.),\n               strings.ilike(.scan.ocr.raw,\
  \ \"*DocuSign*\")\n               and (\n                 any(ml.nlu_classifier(.scan.ocr.raw).intents,\n\
  \                     .name == \"cred_theft\" and .confidence != \"low\"\n     \
  \            )\n                 or (\n                   regex.icontains(.scan.ocr.raw,\n\
  \                                   \"((re)?view|access|complete(d)?) document(s)?\"\
  ,\n                                   '[^d][^o][^cd][^ue]sign(?:\\b|ature)',\n \
  \                                  \"important edocs\",\n                      \
  \             // German (Document (check|check|sign|sent))\n                   \
  \                \"Dokument (\xFCberpr\xFCfen|pr\xFCfen|unterschreiben|geschickt)\"\
  ,\n                                   // German (important|urgent|immediate)\n \
  \                                  \"(wichtig|dringend|sofort)\"\n             \
  \      )\n                   and any(ml.nlu_classifier(.scan.ocr.raw).topics,\n\
  \                           .name == \"E-Signature\"\n                   )\n   \
  \                and not strings.count(.scan.ocr.raw, \"\\n\\n\\n\\n\\n\\n\\n\\\
  n\\n\\n\") > 3\n                 )\n               )\n        )\n      )\n     \
  \ and not any(file.explode(.),\n                  strings.ilike(.scan.ocr.raw,\n\
  \                                \"*DocuSigned By*\",\n                        \
  \        \"*DocuSign Envelope ID*\",\n                                \"*Certificate\
  \ Of Completion*\",\n                                \"*Adobe Sign*\",\n       \
  \                         // Additional Adobe Acrobat Sign check\n             \
  \                   \"*Powered by\\nAdobe\\nAcrobat Sign*\"\n                  )\n\
  \                  or (\n                    .depth == 0\n                    and\
  \ (\n                      (\n                        .scan.exiftool.page_count\
  \ > 10\n                        and length(.scan.strings.strings) > 8000\n     \
  \                 )\n                      or (\n                        .scan.exiftool.producer\
  \ == \"Acrobat Sign\"\n                        and any(.scan.exiftool.fields,\n\
  \                                .key == \"SigningReason\"\n                   \
  \             and .value == \"Certified by Adobe Acrobat Sign\"\n              \
  \          )\n                      )\n                    )\n                 \
  \ )\n                  // negate resume related messages\n                  or (\n\
  \                    any(ml.nlu_classifier(body.current_thread.text).topics,\n \
  \                       .name == \"Professional and Career Development\"\n     \
  \                   and .confidence == \"high\"\n                    )\n       \
  \             and any(ml.nlu_classifier(.scan.ocr.raw).intents,\n              \
  \              .name == \"benign\" and .confidence != \"low\"\n                \
  \    )\n                  )\n      )\n  )\n\n  // accomidate truncated pngs and\
  \ GIF files which can cause logodetect/OCR failures\n  or (\n    any(attachments,\n\
  \        .file_type =~ \"gif\"\n        //\n        // This rule makes use of a\
  \ beta feature and is subject to change without notice\n        // using the beta\
  \ feature in custom rules is not suggested until it has been formally released\n\
  \        //\n        or any(beta.parse_exif(.).fields,\n               .key == \"\
  Warning\" and .value == \"Truncated PNG image\"\n        )\n    )\n    and (\n \
  \     any(ml.logo_detect(file.message_screenshot()).brands, .name == \"DocuSign\"\
  )\n      //\n      // This rule makes use of a beta feature and is subject to change\
  \ without notice\n      // using the beta feature in custom rules is not suggested\
  \ until it has been formally released\n      //\n      or strings.ilike(beta.ocr(file.message_screenshot()).text,\
  \ \"*DocuSign*\")\n    )\n    and (\n      (\n        any(ml.nlu_classifier(beta.ocr(file.message_screenshot()).text).intents,\n\
  \            .name == \"cred_theft\" and .confidence != \"low\"\n        )\n   \
  \     or regex.icontains(beta.ocr(file.message_screenshot()).text,\n           \
  \                \"((re)?view|access|complete(d)?) document(s)?\",\n           \
  \                \"[^d][^o][^c][^u]sign\",\n                           \"important\
  \ edocs\",\n                           // German (Document (check|check|sign|sent))\n\
  \                           \"Dokument (\xFCberpr\xFCfen|pr\xFCfen|unterschreiben|geschickt)\"\
  ,\n                           // German (important|urgent|immediate)\n         \
  \                  \"(wichtig|dringend|sofort)\"\n        )\n      )\n    )\n  \
  \  and not strings.ilike(beta.ocr(file.message_screenshot()).text,\n           \
  \               \"*DocuSigned By*\",\n                          \"*DocuSign Envelope\
  \ ID*\",\n                          \"*Certificate Of Completion*\",\n         \
  \                 \"*Adobe Sign*\"\n    )\n  )\n)\nand (\n  not profile.by_sender_email().solicited\n\
  \  or profile.by_sender_email().prevalence == \"new\"\n  or (\n    profile.by_sender_email().any_messages_malicious_or_spam\n\
  \    and not profile.by_sender_email().any_messages_benign\n  )\n)\nand not profile.by_sender_email().any_messages_benign\n\
  \n// negate docusign 'via' messages\nand not (\n  any(headers.hops,\n      any(.fields,\n\
  \          .name == \"X-Api-Host\" and strings.ends_with(.value, \"docusign.net\"\
  )\n      )\n  )\n  and strings.contains(sender.display_name, \"via\")\n)\n// negate\
  \ docusign originated emails\nand not any(headers.hops,\n            regex.imatch(.received.server.raw,\
  \ \".+.docusign.(net|com)\")\n)\n\n// negate replies to docusign notifications\n\
  and not any(headers.references, strings.iends_with(., '@camail.docusign.net'))"
tactics_and_techniques:
- 'Impersonation: Brand'
- Social engineering
tags:
- Mimecast Needs Fix
type: rule
