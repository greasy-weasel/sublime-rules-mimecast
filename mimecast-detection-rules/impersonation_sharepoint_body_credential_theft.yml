attack_types:
- Credential Phishing
description: |-
  Body, attached images or pdf contains a Sharepoint logo. The message contains a link and credential theft language.
detection_methods:
- Computer Vision
- Content analysis
- File analysis
- Natural Language Understanding
- Sender analysis
id: 284b1b70-8daa-5adf-9df8-15d4c6b5ead9
name: 'Brand impersonation: Sharepoint'
severity: high
source: "type.inbound\nand length(body.links) > 0\nand (\n  any(attachments,\n   \
  \   (.file_type in $file_types_images or .file_type == \"pdf\")\n      and any(ml.logo_detect(.).brands,\
  \ .name == \"Microsoft SharePoint\")\n  )\n  or any(ml.logo_detect(beta.message_screenshot()).brands,\n\
  \         .name == \"Microsoft SharePoint\"\n  )\n  or strings.istarts_with(strings.replace_confusables(body.current_thread.text),\
  \ \"Sharepoint\")\n  or regex.icontains(body.html.raw, '<img.*(title=|alt=).share.*src=\"\
  \"')  // broken Sharepoint logo\n)\nand (\n  (\n    any(ml.nlu_classifier(body.current_thread.text).intents,\n\
  \        .name == \"cred_theft\" and .confidence == \"high\"\n    )\n    or any(file.explode(beta.message_screenshot()),\n\
  \           any(ml.nlu_classifier(.scan.ocr.raw).intents,\n               .name\
  \ == \"cred_theft\" and .confidence == \"high\"\n           )\n    )\n  )\n  or\
  \ any(ml.nlu_classifier(body.current_thread.text).entities,\n         .name == \"\
  urgency\" and strings.ilike(.text, \"*encrypted*\")\n  )\n)\n\nand (\n  not (\n\
  \    (\n      strings.istarts_with(subject.subject, \"RE:\")\n      or strings.istarts_with(subject.subject,\
  \ \"R:\")\n      or strings.istarts_with(subject.subject, \"ODG:\")\n      or strings.istarts_with(subject.subject,\
  \ \"\u7B54\u590D:\")\n      or strings.istarts_with(subject.subject, \"AW:\")\n\
  \      or strings.istarts_with(subject.subject, \"TR:\")\n      or strings.istarts_with(subject.subject,\
  \ \"FWD:\")\n      or regex.imatch(subject.subject, '(\\[[^\\]]+\\]\\s?){0,3}(re|fwd?)\\\
  s?:')\n      or regex.imatch(subject.subject,\n                      '^\\[?(EXT|EXTERNAL)\\\
  ]?[: ]\\s*(RE|FWD?|FW|AW|TR|ODG|\u7B54\u590D):.*'\n      )\n    )\n    and (\n \
  \     (\n        length(headers.references) > 0\n        or any(headers.hops, any(.fields,\
  \ strings.ilike(.name, \"In-Reply-To\")))\n      )\n      // ensure that there are\
  \ actual threads\n      and (length(body.html.display_text) - length(body.current_thread.text))\
  \ > 200\n    )\n  )\n  or length(body.current_thread.text) == 0\n)\n\nand (\n  profile.by_sender_email().prevalence\
  \ != 'common'\n  or not profile.by_sender_email().solicited\n  or profile.by_sender().any_messages_malicious_or_spam\n\
  )\nand not profile.by_sender().any_false_positives\n\n// negate highly trusted sender\
  \ domains unless they fail DMARC authentication\nand (\n  (\n    sender.email.domain.root_domain\
  \ in $high_trust_sender_root_domains\n    and not headers.auth_summary.dmarc.pass\n\
  \  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n\
  )"
tactics_and_techniques:
- 'Impersonation: Brand'
- Social engineering
tags: []
type: rule
