attack_types:
- Credential Phishing
description: |-
  Body, attached images or pdf contains a Sharepoint logo. The message contains a link and credential theft language.
detection_methods:
- Computer Vision
- Content analysis
- File analysis
- Natural Language Understanding
- Sender analysis
id: 284b1b70-8daa-5adf-9df8-15d4c6b5ead9
name: 'Brand impersonation: Sharepoint'
severity: high
source: "type.inbound\nand length(body.links) > 0\nand (\n  any(attachments,\n   \
  \   (.file_type in $file_types_images or .file_type == \"pdf\")\n      and any(ml.logo_detect(.).brands,\
  \ .name == \"Microsoft SharePoint\")\n  )\n  or any(ml.logo_detect(beta.message_screenshot()).brands,\n\
  \         .name == \"Microsoft SharePoint\"\n  )\n  or strings.istarts_with(strings.replace_confusables(body.current_thread.text),\n\
  \                          \"Sharepoint\"\n  )\n  or regex.icontains(body.html.raw,\n\
  \                     '<img.*(title=|alt=).share.*src=\"\"'\n  ) // broken Sharepoint\
  \ logo\n)\nand (\n  (\n    any(ml.nlu_classifier(body.current_thread.text).intents,\n\
  \        .name == \"cred_theft\" and .confidence == \"high\"\n    )\n    or any(file.explode(beta.message_screenshot()),\n\
  \           any(ml.nlu_classifier(.scan.ocr.raw).intents,\n               .name\
  \ == \"cred_theft\" and .confidence == \"high\"\n           )\n    )\n  )\n  or\
  \ any(ml.nlu_classifier(body.current_thread.text).entities,\n         .name == \"\
  urgency\" and strings.ilike(.text, \"*encrypted*\")\n  )\n)\nand not (\n  (\n  \
  \  (\n      strings.istarts_with(subject.subject, \"RE:\")\n      or strings.istarts_with(subject.subject,\
  \ \"R:\")\n      or strings.istarts_with(subject.subject, \"ODG:\")\n      or strings.istarts_with(subject.subject,\
  \ \"\u7B54\u590D:\")\n      or strings.istarts_with(subject.subject, \"AW:\")\n\
  \      or strings.istarts_with(subject.subject, \"TR:\")\n      or strings.istarts_with(subject.subject,\
  \ \"FWD:\")\n      or regex.imatch(subject.subject, '(\\[[^\\]]+\\]\\s?){0,3}(re|fwd?)\\\
  s?:')\n      or regex.imatch(subject.subject,\n                      '^\\[?(EXT|EXTERNAL)\\\
  ]?[: ]\\s*(RE|FWD?|FW|AW|TR|ODG|\u7B54\u590D):.*'\n      )\n    )\n    and (\n \
  \     (length(headers.references) > 0 or headers.in_reply_to is not null)\n    \
  \  // ensure that there are actual threads\n      and (\n        length(body.previous_threads)\
  \ > 0\n        or (length(body.html.display_text) - length(body.current_thread.text))\
  \ > 200\n      )\n    )\n  )\n)\nand (\n  profile.by_sender_email().prevalence !=\
  \ 'common'\n  or not profile.by_sender_email().solicited\n  or profile.by_sender().any_messages_malicious_or_spam\n\
  )\nand not profile.by_sender().any_messages_benign\n\n// negate highly trusted sender\
  \ domains unless they fail DMARC authentication\nand (\n  (\n    sender.email.domain.root_domain\
  \ in $high_trust_sender_root_domains\n    and not headers.auth_summary.dmarc.pass\n\
  \  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n\
  )\n\n// negate sharepoint file share\nand not (\n  // based on the message id format\n\
  \  (\n    (\n      strings.starts_with(headers.message_id, '<Share-')\n      and\
  \ strings.ends_with(headers.message_id, '@odspnotify>')\n    )\n    or // negate\
  \ legitimate access request to file\n (\n      strings.starts_with(headers.message_id,\
  \ '<Sharing')\n      and strings.ends_with(headers.message_id, '@odspnotify>')\n\
  \    )\n    // deal with Google thinking the message ID is \"broke\"\n    or (\n\
  \      strings.icontains(headers.message_id, 'SMTPIN_ADDED_BROKEN')\n      and any(headers.hops,\n\
  \              any(.fields,\n                  .name == \"X-Google-Original-Message-ID\"\
  \n                  and strings.starts_with(.value, '<Share-')\n               \
  \   and strings.ends_with(.value, '@odspnotify>')\n              )\n      )\n  \
  \  )\n  )\n  // all of the \"action\" links are sharepoint/ms\n  and all(filter(body.links,\n\
  \                 strings.icontains(subject.subject, .display_text)\n          \
  \       or .display_text == \"Open\"\n          ),\n           any([\"sharepoint.com\"\
  ], strings.ends_with(..href_url.query_params,.))\n          or (\n            .href_url.domain.tld\
  \ == \"ms\"\n            // Microsoft does not own the .ms TLD, this checks to ensure\
  \ it is one of their domains\n            and (\n              network.whois(.href_url.domain).registrant_company\
  \ == \"Microsoft Corporation\"\n              or strings.ilike(network.whois(.href_url.domain).registrar_name,\n\
  \                               \"*MarkMonitor*\",\n                           \
  \    \"*CSC Corporate*\",\n                               \"*com laude*\"\n    \
  \          )\n            )\n          )\n  )\n)"
tactics_and_techniques:
- 'Impersonation: Brand'
- Social engineering
tags:
- Mimecast Needs Fix
type: rule
