attack_types:
- Credential Phishing
description: |-
  Impersonation of Dropbox, a file sharing service.
detection_methods:
- Content analysis
- File analysis
- Header analysis
- Sender analysis
id: 61f11d12-7033-53c9-a95a-df982ff31c4b
name: 'Brand impersonation: Dropbox'
severity: medium
source: |-
  type.inbound
  and (
    strings.ilike(sender.display_name, '*dropbox*')
    or strings.ilevenshtein(sender.display_name, 'dropbox') <= 1
    or strings.ilike(sender.email.domain.domain, '*dropbox*')
    or any(body.links,
           .display_url.domain.root_domain == "dropbox.com"
           and .mismatched
           and not  any([
             "mimecast.com",
             "mimecastprotect.com"
           ], strings.ends_with(..href_url.query_params,.))
    )
    or regex.icontains(body.current_thread.text,
                       'invited you to view the file ".*" on Dropbox'
    )
  )
  and sender.email.domain.root_domain not in~ (
    'dropbox.com',
    'dropboxforum.com',
    'dropboxsign.com'
  )
  and (
    any(attachments,
        .file_type in $file_types_images
        and any(file.explode(.), strings.ilike(.scan.ocr.raw, "*dropbox*"))
    )
    or any(body.links,
           strings.ilike(.display_text,
                         "*review*",
                         "*sign*",
                         "*view*",
                         "*completed document*",
                         "*open agreement*",
                         "*open document*",
                         "*open file*"
           )
           and not strings.ilike(.display_text, "*view this email in*")
           and .href_url.domain.root_domain != "dropbox.com"
           and any(ml.nlu_classifier(body.current_thread.text).intents,
                   .name == "cred_theft" and .confidence in ("medium", "high")
           )
    )
    or (
      length(ml.logo_detect(file.message_screenshot()).brands) != 0
      and all(ml.logo_detect(file.message_screenshot()).brands,
              .name == "Dropbox"
      )
    )
  )
  and sender.email.email not in $recipient_emails

  // negate dropbox fax (aka hellofax)
  and not sender.email.domain.root_domain == 'hellofax.com'

  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
tactics_and_techniques:
- 'Impersonation: Brand'
- Social engineering
tags:
- Mimecast Needs Fix
type: rule
