attack_types:
- Callback Phishing
- Credential Phishing
description: Impersonation of the Quickbooks service from Intuit.
detection_methods:
- Computer Vision
- Content analysis
- Header analysis
- Sender analysis
id: 4fd791d1-a053-5c2d-80dd-c6dcdc112a62
name: 'Brand impersonation: Quickbooks'
severity: medium
source: "type.inbound\nand (\n  (\n    strings.ilike(sender.display_name, 'quickbook*')\n\
  \    or strings.ilevenshtein(sender.display_name, 'quickbooks') <= 1\n    or strings.ilike(sender.email.domain.domain,\
  \ '*quickbook*')\n  )\n  or strings.ilike(body.current_thread.text, \"*invoice*\"\
  )\n)\nand (\n  any(ml.logo_detect(beta.message_screenshot()).brands,\n      .name\
  \ == \"Quickbooks\" and .confidence in (\"medium\", \"high\")\n  )\n  // contains\
  \ the address and copyright\n  or (\n    strings.icontains(body.current_thread.text,\n\
  \                      '2800 E. Commerce Center Place, Tucson, AZ 85706'\n    )\n\
  \    and regex.icontains(body.current_thread.text, '\xA9\\s*(?:\\d+)\\s*Intuit')\n\
  \  )\n  or strings.icontains(body.current_thread.text, 'Powered by QuickBooks')\n\
  \  or strings.icontains(body.current_thread.text,\n                       'QuickBooks\
  \ and Intuit are trademarks of Intuit Inc.'\n  )\n  // phone number and update language\n\
  \  or (\n    regex.icontains(body.current_thread.text,\n                    '\\\
  +?([ilo0-9]{1}.)?\\(?[ilo0-9]{3}?\\)?.[ilo0-9]{3}.?[ilo0-9]{4}',\n             \
  \       '\\+?([ilo0-9]{1,2})?\\s?\\(?\\d{3}\\)?[\\s\\.\\-\u22C5]{0,5}[ilo0-9]{3}[\\\
  s\\.\\-\u22C5]{0,5}[ilo0-9]{4}'\n    )\n    and any(beta.ml_topic(body.current_thread.text).topics,\n\
  \            .name == \"Software and App Updates\"\n    )\n\n    // we need to re-check\
  \ for QB indicators, otherwise we can have \"*invoice*\"\n    // and this block,\
  \ which is much more than just QB impersonation\n    and (\n      strings.ilike(sender.display_name,\
  \ '*quickbooks*')\n      or strings.ilevenshtein(sender.display_name, 'quickbooks')\
  \ <= 1\n      or strings.ilike(sender.email.domain.domain, '*quickbooks*')\n   \
  \ )\n  )\n)\nand sender.email.domain.root_domain not in~ (\n  'intuit.com',\n  'turbotax.com',\n\
  \  'intuit.ca',\n  'meliopayments.com',\n  'qemailserver.com',\n  'intuit.co.uk',\n\
  \  'quickbooksonline.com',\n  'tsheets.com'\n)\nand (\n  not profile.by_sender().any_messages_benign\n\
  \  and not profile.by_sender().solicited\n)\n// links in body are not known QB domains\
  \ or the senders root website (both indicative of a legitimate QuickBooks invoice\
  \ message)\nand (\n  length(filter(body.links,\n                .href_url.domain.root_domain\
  \ in~ (\n                  'intuit.com',\n                  'turbotax.com',\n  \
  \                'intuit.ca',\n                  'meliopayments.com',\n        \
  \          'qemailserver.com',\n                  'intuit.co.uk',\n            \
  \      'quickbooksonline.com'\n                )\n                or (\n       \
  \            strings.ends_with(.href_url.query_params,sender.email.domain.root_domain)\n\
  \                  and (.href_url.path is null or .href_url.path == \"/\")\n   \
  \             )\n                // handle links to the root website when the sender\
  \ uses a freemail address to send invoices\n                or (\n             \
  \     .href_url.domain.sld == sender.email.local_part\n                  and (.href_url.path\
  \ is null or .href_url.path == \"/\")\n                  and sender.email.domain.root_domain\
  \ in $free_email_providers\n                )\n         )\n  ) != length(body.links)\n\
  \  // or no valid links\n  or length(filter(body.links, .href_url.domain.domain\
  \ is not null)) == 0\n)\n// the call to action link does not lead to inuit\nand\
  \ not (\n  // filter down to observed call to action display text\n  any(filter(body.links,\n\
  \             .display_text in~ (\n               \"view and pay\",\n          \
  \     \"review and pay\",\n               \"view details\"\n             )\n   \
  \   ),\n      // benign/legit href_url details for those links\n      (\n      \
  \  // sendgrid rewritten links\n         .href_url.query_params == \"domain=links.notification.intuit.com\"\
  \n        // CTA link\n        or (\n           .href_url.query_params == \"domain=connect.intuit.com\"\
  \n          and strings.icontains(.href_url.query_params, 'cta=viewinvoicenow')\n\
  \        )\n        // Mimecast links\n        or (\n           strings.ends_with(.href_url.query_params,\"\
  mimecastprotect.com\")\n          and (\n            strings.icontains(.href_url.query_params,\n\
  \                              'domain=links.notification.intuit.com'\n        \
  \    )\n            or strings.icontains(.href_url.query_params,\n             \
  \                    'domain=connect.intuit.com'\n            )\n          )\n \
  \       )\n      )\n  )\n)\n// negate common sender of quickbooks reseller\nand\
  \ not strings.icontains(body.current_thread.text, 'Purchasing Reviews, Inc')\n//\
  \ negate highly trusted sender domains unless they fail DMARC authentication\nand\
  \ (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n\
  \    and not headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain\
  \ not in $high_trust_sender_root_domains\n)"
tactics_and_techniques:
- 'Impersonation: Brand'
- Social engineering
tags:
- Mimecast Hard to Fix
type: rule
