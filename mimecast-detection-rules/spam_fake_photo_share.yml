attack_types:
- Spam
description: Message contains pretexting language about sharing photos ("found these
  photos and thought you'd like them", "remember these photos?") and a link with a
  newly registered domain. Fake threads and plain text bodies have been seen in the
  wild, indicating active evasion techniques.
detection_methods:
- Content analysis
- Sender analysis
- URL analysis
- Whois
id: eb086f7d-3ad7-52cd-8e16-3ce08726b9ea
name: 'Spam: Fake photo share'
severity: low
source: "type.inbound\nand length(attachments) == 0\nand (\n  (\n    (\n      (\n\
  \        (length(body.plain.raw) < 500 and length(body.current_thread.text) == 0)\n\
  \        or (\n          length(body.html.display_text) < 500\n          and length(body.current_thread.text)\
  \ == 0\n        )\n        or (length(body.current_thread.text) < 500)\n      )\n\
  \      and strings.ilike(subject.subject,\n                        \"*picture*\"\
  ,\n                        \"*photo*\",\n                        \"*image*\",\n\
  \                        \"*sad news*\",\n                        \"*sad announcement*\"\
  ,\n                        \"*new pics*\"\n      )\n    )\n    or (\n      (\n \
  \       (\n          length(body.html.display_text) < 500\n          and length(body.current_thread.text)\
  \ == 0\n        )\n        and strings.ilike(body.html.display_text,\n         \
  \                 \"*picture*\",\n                          \"*photo*\",\n     \
  \                     \"*image*\",\n                          \"*sad news*\",\n\
  \                          \"*sad announcement*\",\n                          \"\
  *new pics*\"\n        )\n      )\n      or (\n        (length(body.plain.raw) <\
  \ 500 and length(body.current_thread.text) == 0)\n        and strings.ilike(body.plain.raw,\n\
  \                          \"*picture*\",\n                          \"*photo*\"\
  ,\n                          \"*image*\",\n                          \"*sad news*\"\
  ,\n                          \"*sad announcement*\",\n                         \
  \ \"*new pics*\"\n        )\n        and not strings.icontains(body.plain.raw, \"\
  [cid:image\")\n      )\n      or (\n        length(body.current_thread.text) < 500\n\
  \        and strings.ilike(body.current_thread.text,\n                         \
  \ \"*picture*\",\n                          \"*photo*\",\n                     \
  \     \"*image*\",\n                          \"*sad news*\",\n                \
  \          \"*sad announcement*\",\n                          \"*new pics*\"\n \
  \       )\n      )\n    )\n    or (\n      body.plain.raw is not null\n      and\
  \ body.html.display_text is null\n      and (\n        length(body.current_thread.text)\
  \ == 0\n        or (\n          length(body.current_thread.text) < 500\n       \
  \   // fake forward indicator in the plain text body\n          and (\n        \
  \    regex.contains(body.plain.raw,\n                           'On (Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday).{0,50}\
  \ wrote'\n            )\n            or strings.icontains(body.plain.raw, 'Original\
  \ Message')\n          )\n          and not regex.contains(body.current_thread.text,\n\
  \                                 'On (Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday).{0,50}\
  \ wrote'\n          )\n          and not strings.icontains(body.current_thread.text,\n\
  \                                    'Original Message'\n          )\n         \
  \ and not any(headers.hops, any(.fields, .name == \"Resent-From\"))\n        )\n\
  \      )\n      and strings.ilike(body.plain.raw,\n                        \"*picture*\"\
  ,\n                        \"*photo*\",\n                        \"*image*\",\n\
  \                        \"*sad news*\",\n                        \"*sad announcement*\"\
  ,\n                        \"*pics*\"\n      )\n      and not strings.istarts_with(body.plain.raw,\
  \ \"[cid:image\")\n      and strings.icontains(subject.subject, sender.display_name)\n\
  \    )\n    or (\n      strings.icontains(subject.subject, sender.display_name)\n\
  \      and sender.email.domain.root_domain in $free_email_providers\n      and length(body.links)\
  \ == 2\n      and length(filter(body.links, .display_text == \"h\")) == 1\n    \
  \  and length(filter(body.links, .display_url.scheme == \"ttp\")) == 1\n    )\n\
  \  )\n  and length(body.links) < 5\n  and any(body.links,\n          (\n       \
  \     (\n              network.whois(.href_url.domain).days_old < 30\n         \
  \     or not network.whois(.href_url.domain).found\n              or network.whois(.href_url.domain).found\
  \ is null\n            )\n            and  not(strings.ends_with(.href_url.query_params,sender.email.domain.root_domain))\n\
  \          )\n          or (\n            length(.display_text) == 1\n         \
  \   and  any([\"facebook.com\", \"youtube.com\"], strings.ends_with(..href_url.query_params,.))\n\
  \          )\n  )\n)\nand (\n  (\n    (\n      length(headers.references) > 0\n\
  \      or not any(headers.hops,\n                 any(.fields, strings.ilike(.name,\
  \ \"In-Reply-To\"))\n      )\n    )\n    and not (\n      (\n        strings.istarts_with(subject.subject,\
  \ \"RE:\")\n        or strings.istarts_with(subject.subject, \"R:\")\n        or\
  \ strings.istarts_with(subject.subject, \"ODG:\")\n        or strings.istarts_with(subject.subject,\
  \ \"\u7B54\u590D:\")\n        or strings.istarts_with(subject.subject, \"AW:\")\n\
  \        or strings.istarts_with(subject.subject, \"TR:\")\n        or strings.istarts_with(subject.subject,\
  \ \"FWD:\")\n        or regex.imatch(subject.subject, '(\\[[^\\]]+\\]\\s?){0,3}(re|fwd?)\\\
  s?:')\n      )\n    )\n  )\n  or length(headers.references) == 0\n)"
tactics_and_techniques:
- Evasion
- Social engineering
tags:
- Mimecast Needs Fix
type: rule
