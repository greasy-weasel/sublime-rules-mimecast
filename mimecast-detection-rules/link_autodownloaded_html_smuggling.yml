attack_types:
- Credential Phishing
description: Message contains a low reputation link to an automatically downloaded
  HTML file that contains HTML smuggling indicators, such as atob function use, excessive
  hexadecimal (0x) usage, etc.
detection_methods:
- Content analysis
- File analysis
- HTML analysis
- Javascript analysis
- Sender analysis
- URL analysis
id: 339676c6-cdac-5929-aa02-c44a346e5ef1
name: Low reputation link to auto-downloaded HTML file with smuggling indicators
severity: high
source: |-
  type.inbound
  and any(body.links,
           (
              not(any($tranco_1m, strings.ends_with(..href_url.query_params,.)))
             or  any($free_file_hosts, ..href_url.query_params == strings.concat("domain=",.))
             or  any($free_file_hosts, strings.ends_with(..href_url.query_params,.))
             or  any($free_subdomain_hosts, strings.ends_with(..href_url.query_params,.))
             or  any($url_shorteners, ..href_url.query_params == strings.concat("domain=",.))
             or  any($social_landing_hosts, ..href_url.query_params == strings.concat("domain=",.))
             or

             // mass mailer link, masks the actual URL
              any([
               "hubspotlinks.com",
               "mandrillapp.com",
               "sendgrid.net",
               "rs6.net"
             ], strings.ends_with(..href_url.query_params,.))

             // Google AMP redirect
             or (
               .href_url.domain.sld == "google"
               and strings.starts_with(.href_url.path, "/amp/")
             )
           )

           // exclude sources of potential FPs
           and (
              not(any([
               "svc.ms",
               "sharepoint.com",
               "1drv.ms",
               "microsoft.com",
               "aka.ms",
               "msftauthimages.net",
               "mimecastprotect.com",
               "office.com"
             ], strings.ends_with(..href_url.query_params,.)))
             or any(body.links,  any($free_file_hosts, ..href_url.query_params == strings.concat("domain=",.)) )
           )
           and  not(any($org_domains, strings.ends_with(..href_url.query_params,.)))
           and .href_url.domain.valid
   )
  and any(body.links,
          any(ml.link_analysis(.).files_downloaded,
              any(file.explode(.),
                  .scan.entropy.entropy >= 5
                  and (
                    length(filter(.scan.javascript.identifiers,
                                  strings.like(.,
                                               "document",
                                               "write",
                                               "atob",
                                               "onload"
                                  )
                           )
                    ) > 2
                    // usage: document['write'](atob)
                    or any(.scan.strings.strings,
                           regex.icontains(., "document.{0,10}write.{0,10}atob")
                    )
                    or any(.scan.strings.strings, strings.icount(., "_0x") > 50)
                    // usage: some_var = atob();
                    or any(.scan.strings.strings,
                           regex.icontains(., "=.?atob.*;")
                    )
                    // usage: atob(atob
                    or any(.scan.strings.strings, strings.ilike(., "*atob?atob*"))
                    // usage: eval(atob)
                    or any(.scan.strings.strings, strings.ilike(., "*eval?atob*"))
                    // usage: atob(_0x)
                    or any(.scan.strings.strings, strings.ilike(., "*atob(?0x*"))
                    // usage: obfuscating "atob"
                    or any(.scan.javascript.identifiers,
                           strings.ilike(., '*ato\u0062*')
                    )
                    // usage: document.head.insertAdjacentHTML("beforeend", atob(...
                    or any(.scan.strings.strings,
                           strings.ilike(., "*document*insertAdjacentHTML*atob*")
                    )
                  )
              )
          )
  )
  and (
    not profile.by_sender().solicited
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_messages_benign
    )
  )
tactics_and_techniques:
- Evasion
- Free file host
- Free subdomain host
- HTML smuggling
- 'Impersonation: Brand'
- Open redirect
- Social engineering
tags:
- Mimecast Hard to Fix
type: rule
