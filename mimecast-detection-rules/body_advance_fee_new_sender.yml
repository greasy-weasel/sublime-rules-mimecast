attack_types:
- BEC/Fraud
description: |-
  Advance Fee Fraud (AFF) is a type of BEC/Fraud involving upfront fees for promised
  future returns, such as lottery scams, inheritance payouts, and investment opportunities.
  This rule identifies messages from Freemail domains or suspicious TLDS, including those
  with suspicious reply-to addresses. It utilizes Natural Language Understanding to detect
  AFF language in their contents.
detection_methods:
- Content analysis
- Header analysis
- Natural Language Understanding
- Sender analysis
id: 6a5af373-a97b-5013-aeec-42ac8b4b8ba1
name: Advance Fee Fraud (AFF) from freemail provider or suspicious TLD
severity: medium
source: "type.inbound\nand (\n  sender.email.domain.domain in $free_email_providers\n\
  \  or (\n    length(headers.reply_to) > 0\n    and all(headers.reply_to,\n     \
  \       (\n              .email.domain.root_domain in $free_email_providers\n  \
  \            or .email.domain.tld in $suspicious_tlds\n            )\n         \
  \   and .email.email != sender.email.email\n    )\n  )\n  or sender.email.domain.tld\
  \ in $suspicious_tlds\n)\nand (\n  any(ml.nlu_classifier(body.current_thread.text).intents,\n\
  \      .name == \"advance_fee\" and .confidence in (\"medium\", \"high\")\n  )\n\
  \  or (\n    length(body.current_thread.text) < 200\n    and regex.icontains(body.current_thread.text,\n\
  \                        '(donation|inheritence|\\$\\d,\\d{3}\\,\\d{3}|lottery)'\n\
  \    )\n    and not regex.icontains(body.current_thread.text,\n                \
  \            '(closed.{0,50})?\\$\\d,\\d{3}\\,\\d{3}.{0,100}(homes|realty|sale)?'\n\
  \    )\n    and not any(body.links,\n                regex.icontains(.href_url.url,\n\
  \                                '(donation|inheritence|\\$\\d,\\d{3}\\,\\d{3}|lottery)'\n\
  \                )\n    )\n    and (\n      (\n        (\n          length(headers.references)\
  \ > 0\n          or not any(headers.hops,\n                     any(.fields, strings.ilike(.name,\
  \ \"In-Reply-To\"))\n          )\n        )\n        and not (\n          (\n  \
  \          strings.istarts_with(subject.subject, \"RE:\")\n            // out of\
  \ office auto-reply\n            or strings.istarts_with(subject.subject, \"Automatic\
  \ reply:\")\n            or strings.istarts_with(subject.subject, \"R:\")\n    \
  \        or strings.istarts_with(subject.subject, \"ODG:\")\n            or strings.istarts_with(subject.subject,\
  \ \"\u7B54\u590D:\")\n            or strings.istarts_with(subject.subject, \"AW:\"\
  )\n            or strings.istarts_with(subject.subject, \"TR:\")\n            or\
  \ strings.istarts_with(subject.subject, \"FWD:\")\n            or regex.icontains(subject.subject,\n\
  \                               '^(\\[[^\\]]+\\]\\s?){0,3}(re|fwd?)\\s?:'\n    \
  \        )\n          )\n        )\n      )\n      or any(headers.reply_to, .email.email\
  \ != sender.email.email)\n    )\n  )\n)\nand (\n  not profile.by_sender().solicited\n\
  \  or profile.by_sender().any_messages_malicious_or_spam\n)\nand not profile.by_sender().any_messages_benign"
tactics_and_techniques:
- Social engineering
tags:
- Mimecast Hard to Fix
type: rule
