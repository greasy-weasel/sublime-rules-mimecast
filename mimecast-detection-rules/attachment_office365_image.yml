attack_types:
- Credential Phishing
description: |-
  Looks for messages with an image attachment that contains words related to Microsoft, Office365, and passwords.
detection_methods:
- Content analysis
- File analysis
- Header analysis
- Optical Character Recognition
- Sender analysis
id: edce0229-5e8f-5359-a5c8-36570840049f
name: 'Attachment: Microsoft 365 credential phishing'
severity: high
source: "type.inbound\nand length(filter(attachments, .file_type not in $file_types_images))\
  \ == 0\nand (\n  any(attachments,\n      .file_type in $file_types_images\n    \
  \  and any(ml.logo_detect(.).brands, strings.starts_with(.name, \"Microsoft\"))\n\
  \  )\n  or any(attachments,\n         .file_type in $file_types_images\n       \
  \  and any(file.explode(.),\n                 strings.ilike(.scan.ocr.raw, \"*microsoft*\"\
  , \"*office\")\n                 and length(.scan.ocr.raw) < 1500\n         )\n\
  \  )\n)\nand any(attachments,\n        .file_type in $file_types_images\n      \
  \  and any(file.explode(.),\n                length(filter([\n                 \
  \               \"password\",\n                                \"unread messages\"\
  ,\n                                \"Shared Documents\",\n                     \
  \           \"expiration\",\n                                \"expire\",\n     \
  \                           \"expiring\",\n                                \"kindly\"\
  ,\n                                \"renew\",\n                                \"\
  review\",\n                                \"emails failed\",\n                \
  \                \"kicked out\",\n                                \"prevented\"\
  ,\n                                \"storage\",\n                              \
  \  \"required now\",\n                                \"cache\",\n             \
  \                   \"qr code\",\n                                \"security update\"\
  ,\n                                \"invoice\",\n                              \
  \  \"retrieve\",\n                                \"blocked\"\n                \
  \              ],\n                              strings.icontains(..scan.ocr.raw,\
  \ .)\n                       )\n                ) >= 2\n                or (\n \
  \                 any(ml.nlu_classifier(.scan.ocr.raw).intents,\n              \
  \        .name == \"cred_theft\" and .confidence == \"high\"\n                 \
  \ )\n                and length(ml.nlu_classifier(.scan.ocr.raw).entities) > 1\n\
  \              )\n        )\n)\nand (\n  not any(headers.hops,\n          .authentication_results.compauth.verdict\
  \ is not null\n          and .authentication_results.compauth.verdict == \"pass\"\
  \n          and sender.email.domain.domain in (\n            \"microsoft.com\",\n\
  \            \"sharepointonline.com\"\n          )\n  )\n)\n\n// negate angelbeat\
  \ urls and microsoft disclaimer links\nand (\n  length(body.links) > 0\n  and not\
  \ all(body.links,\n           any([\n            \"abeatinfo.com\",\n          \
  \  \"abeatinvite.com\",\n            \"aka.ms\",\n            \"angelbeat.com\"\n\
  \          ], strings.ends_with(..href_url.query_params,.))\n  )\n)\n\n// negate\
  \ replies\nand (\n  (\n    (\n      length(headers.references) > 0\n      or not\
  \ any(headers.hops,\n                 any(.fields, strings.ilike(.name, \"In-Reply-To\"\
  ))\n      )\n    )\n    and not (\n      (\n        strings.istarts_with(subject.subject,\
  \ \"RE:\")\n        or strings.istarts_with(subject.subject, \"R:\")\n        or\
  \ strings.istarts_with(subject.subject, \"ODG:\")\n        or strings.istarts_with(subject.subject,\
  \ \"\u7B54\u590D:\")\n        or strings.istarts_with(subject.subject, \"AW:\")\n\
  \        or strings.istarts_with(subject.subject, \"TR:\")\n        or strings.istarts_with(subject.subject,\
  \ \"FWD:\")\n        or regex.icontains(subject.subject, '^(\\[[^\\]]+\\]\\s?){0,3}(re|fwd?)\\\
  s?:')\n      )\n    )\n  )\n  or length(headers.references) == 0\n)\n\nand (\n \
  \ not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n\
  \    and not profile.by_sender().any_messages_benign\n  )\n)\n\n// negate highly\
  \ trusted sender domains unless they fail DMARC authentication\nand (\n  (\n   \
  \ sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and not\
  \ headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain not\
  \ in $high_trust_sender_root_domains\n)\nand not profile.by_sender().any_messages_benign"
tactics_and_techniques:
- 'Impersonation: Brand'
- Social engineering
tags:
- Mimecast Changes Complete
type: rule
