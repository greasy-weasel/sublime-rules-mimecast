attack_types:
- Credential Phishing
description: Detects low reputation links with Microsoft specific indicators in the
  body.
detection_methods:
- Computer Vision
- Content analysis
- File analysis
- Header analysis
- Natural Language Understanding
- Optical Character Recognition
- Sender analysis
- URL analysis
id: b59201b6-f253-55a6-9c0a-e1500a32a751
name: 'Brand impersonation: Microsoft with low reputation links'
severity: medium
source: "type.inbound\nand 0 < length(body.links) < 50\n// suspicious link\nand any(body.links,\n\
  \        (\n           not(any($tranco_1m, strings.ends_with(..href_url.query_params,.)))\n\
  \          or  any($free_file_hosts, ..href_url.query_params == strings.concat(\"\
  domain=\",.))\n          or  any($free_file_hosts, strings.ends_with(..href_url.query_params,.))\n\
  \          or  any($free_subdomain_hosts, strings.ends_with(..href_url.query_params,.))\n\
  \          or  any($url_shorteners, ..href_url.query_params == strings.concat(\"\
  domain=\",.))\n          or\n\n          // mass mailer link, masks the actual URL\n\
  \           any([\n            \"hubspotlinks.com\",\n            \"mandrillapp.com\"\
  ,\n            \"sendgrid.net\",\n            \"rs6.net\"\n          ], strings.ends_with(..href_url.query_params,.))\n\
  \n          // Google AMP redirect\n          or (\n            .href_url.domain.sld\
  \ == \"google\"\n            and strings.starts_with(.href_url.path, \"/amp/\")\n\
  \          )\n\n         // Recipient email address in link\n         or any(body.links,\n\
  \                any(recipients.to,\n                    strings.icontains(..href_url.url,\
  \ .email.email)\n                    and any(recipients.to, .email.domain.valid)\n\
  \                )\n         )\n         or  strings.ends_with(.href_url.query_params,\"\
  beehiiv.com\")\n        )\n\n        // exclude sources of potential FPs\n     \
  \   and (\n           not(any([\n            \"svc.ms\",\n            \"sharepoint.com\"\
  ,\n            \"1drv.ms\",\n            \"microsoft.com\",\n            \"aka.ms\"\
  ,\n            \"msftauthimages.net\",\n            \"mimecastprotect.com\",\n \
  \           \"office.com\",\n            \"microsoftproject.com\"\n          ],\
  \ strings.ends_with(..href_url.query_params,.)))\n          or any(body.links, \
  \ any($free_file_hosts, ..href_url.query_params == strings.concat(\"domain=\",.))\
  \ )\n        )\n        and  not(any($org_domains, strings.ends_with(..href_url.query_params,.)))\n\
  \        and .href_url.domain.valid\n)\n\n// not a reply\nand (\n    length(headers.references)\
  \ == 0\n    or not any(headers.hops, any(.fields, strings.ilike(.name, \"In-Reply-To\"\
  )))\n)\n\n// Microsoft logo\nand (\n  any(attachments,\n      .file_type in $file_types_images\n\
  \      and any(ml.logo_detect(.).brands, strings.starts_with(.name, \"Microsoft\"\
  ))\n  )\n  or strings.istarts_with(strings.replace_confusables(body.current_thread.text),\
  \ \"Microsoft \")\n  or (\n    regex.imatch(strings.replace_confusables(body.current_thread.text),\n\
  \                 '[\\n\\s]*[o0O]ff[il1]ce\\b.*'\n    )\n    and not regex.icontains(strings.replace_confusables(body.current_thread.text),\n\
  \                 'office (for lease|rent|sale)'\n    )\n  )\n  or any(ml.logo_detect(beta.message_screenshot()).brands,\n\
  \         strings.starts_with(.name, \"Microsoft\")\n  )\n  or (\n    regex.icontains(body.html.raw,\n\
  \                    '<table[^>]*>\\s*<tbody[^>]*>\\s*<tr[^>]*>\\s*(<td[^>]*bgcolor=\"\
  #[0-9A-Fa-f]{6}\"[^>]*>\\s*&nbsp;\\s*</td>\\s*){2}\\s*</tr>\\s*<tr[^>]*>\\s*(<td[^>]*bgcolor=\"\
  #[0-9A-Fa-f]{6}\"[^>]*>\\s*&nbsp;\\s*</td>\\s*){2}'\n    )\n    or regex.icontains(body.html.raw,\n\
  \                       '<td style=\"background:\\s*rgb\\(246,\\s*93,\\s*53\\);\\\
  s*height:\\d+px;\">.*?<td style=\"background:\\s*rgb\\(129,\\s*187,\\s*5\\);\\s*height:\\\
  d+px;\">.*?<td style=\"background:\\s*rgb\\(4,\\s*165,\\s*240\\);\\s*height:\\d+px;\"\
  >.*?<td style=\"background:\\s*rgb\\(255,\\s*186,\\s*7\\);\\s*height:\\d+px;\">'\n\
  \    )\n    or 4 of (\n      regex.icontains(body.html.raw,\n                  \
  \    '<td style=\"width:.\\d.px;.height:.\\d.px;.background-color:.rgb\\(245, 189,\
  \ 67\\);\">.{0,10}</td>'\n      ),\n      regex.icontains(body.html.raw,\n     \
  \                 '<td style=\"width:.\\d.px;.height:.\\d.px;.background-color:.rgb\\\
  (137, 184, 57\\);\">.{0,10}</td>'\n      ),\n      regex.icontains(body.html.raw,\n\
  \                      '<td style=\"width:.\\d.px;.height:.\\d.px;.background-color:.rgb\\\
  (217, 83, 51\\);\">.{0,10}</td>'\n      ),\n      regex.icontains(body.html.raw,\n\
  \                      '<td style=\"width:.\\d.px;.height:.\\d.px;.background-color:.rgb\\\
  (71, 160, 218\\);\">.{0,10}</td>'\n      )\n    )\n  )\n  or regex.icontains(body.html.raw,\n\
  \                     '<table[^>]*>\\s*<tbody[^>]*>\\s*<tr[^>]*>\\s*(<td[^>]*bgcolor=\"\
  #[0-9A-Fa-f]{6}\"[^>]*>\\s*&nbsp;\\s*</td>\\s*){2}\\s*</tr>\\s*<tr[^>]*>\\s*(<td[^>]*bgcolor=\"\
  #[0-9A-Fa-f]{6}\"[^>]*>\\s*&nbsp;\\s*</td>\\s*){2}'\n  )\n  or 3 of (\n    regex.icontains(body.html.raw,\
  \ '.password-expiration'),\n    regex.icontains(body.html.raw, 'color: #2672ec;'),\n\
  \    regex.icontains(body.html.raw, 'M\xADic\xADro\xADso\xADft')\n  )\n  or 4 of\
  \ (\n    regex.icontains(body.html.raw, 'rgb\\(246,\\s?93,\\s?53\\)'),\n    regex.icontains(body.html.raw,\
  \ 'rgb\\(129,\\s?187,\\s?5\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(4,\\\
  s?165,\\s?240\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(255,\\s?186,\\s?7\\\
  )'),\n  )\n  or 4 of (\n    regex.icontains(body.html.raw,\n                   \
  \ '(background-color:|background:|bgcolor=)(.)red'\n    ),\n    regex.icontains(body.html.raw,\
  \ 'rgb\\(19,\\s?186,\\s?132\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(4,\\\
  s?166,\\s?240\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(255,\\s?186,\\s?8\\\
  )'),\n  )\n  or 4 of (\n    regex.icontains(body.html.raw, 'rgb\\(245,\\s?189,\\\
  s?67\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(137,\\s?184,\\s?57\\)'),\n\
  \    regex.icontains(body.html.raw, 'rgb\\(217,\\s?83,\\s?51\\)'),\n    regex.icontains(body.html.raw,\
  \ 'rgb\\(71,\\s?160,\\s?218\\)')\n  )\n  or 4 of (\n    regex.icontains(body.html.raw,\
  \ 'rgb\\(73,\\s?161,\\s?232\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(224,\\\
  s?92,\\s?53\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(139,\\s?183,\\s?55\\\
  )'),\n    regex.icontains(body.html.raw, 'rgb\\(244,\\s?188,\\s?65\\)')\n  )\n \
  \ or 4 of (\n    regex.icontains(body.html.raw, 'rgb\\(213,\\s?56,\\s?62\\)'),\n\
  \    regex.icontains(body.html.raw, 'rgb\\(0,\\s?114,\\s?30\\)'),\n    regex.icontains(body.html.raw,\
  \ 'rgb\\(0,\\s?110,\\s?173\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(227,\\\
  s?209,\\s?43\\)'),\n  )\n  or 4 of (\n    regex.icontains(body.html.raw, 'rgb\\\
  (246,\\s?93,\\s?53\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(129,\\s?187,\\\
  s?5\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(4,\\s?165,\\s?240\\)'),\n \
  \   regex.icontains(body.html.raw, 'rgb\\(255,\\s?186,\\s?7\\)')\n  )\n  or 4 of\
  \ (\n    regex.icontains(body.html.raw, 'rgb\\(242,\\s?80,\\s?34\\)'),\n    regex.icontains(body.html.raw,\
  \ 'rgb\\(127,\\s?186,\\s?0\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(0,\\\
  s?164,\\s?239\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(255,\\s?185,\\s?0\\\
  )'),\n  )\n  or 4 of (\n    regex.icontains(body.html.raw, 'rgb\\(243,\\s?83,\\\
  s?37\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(129,\\s?188,\\s?6\\)'),\n\
  \    regex.icontains(body.html.raw, 'rgb\\(5,\\s?166,\\s?240\\)'),\n    regex.icontains(body.html.raw,\
  \ 'rgb\\(255,\\s?186,\\s?8\\)')\n  )\n  or 4 of (\n    regex.icontains(body.html.raw,\
  \ 'rgb\\(243,\\s?80,\\s?34\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(128,\\\
  s?187,\\s?3\\)'),\n    regex.icontains(body.html.raw, 'rgb\\(3,\\s?165,\\s?240\\\
  )'),\n    regex.icontains(body.html.raw, 'rgb\\(255,\\s?185,\\s?3\\)')\n  )\n  or\
  \ 4 of (\n    regex.icontains(body.html.raw,\n                    '(background-color:|background:|bgcolor=)(.)?(#)?(FF1940|eb5024|F25022|FF1941|red)'\n\
  \    ),\n    regex.icontains(body.html.raw,\n                    '(background-color:|background:|bgcolor=)(.)?(#)?(36ba57|3eb55d|7db606|7FBA00|36ba58|green)'\n\
  \    ),\n    regex.icontains(body.html.raw,\n                    '(background-color:|background:|bgcolor=)(.)?#(04a1d6|04B5F0|05a1e8|00A4EF|01a4ef|04a5f0)'\n\
  \    ),\n    regex.icontains(body.html.raw,\n                    '(background-color:|background:|bgcolor=)(.)?#(FFCA07|f7b408|FFB900|FFCA08|ffb901|ffba07)'\n\
  \    ),\n  )\n  or 4 of (\n    regex.icontains(body.html.raw,\n                \
  \    '(background-color:|background:|bgcolor=)(.)?#(f65314|f65d35|49a1e8|E74F23|F35325)'\n\
  \    ),\n    regex.icontains(body.html.raw,\n                    '(background-color:|background:|bgcolor=)(.)?#(7cbf42|81bb05|e05c35|7AB206|81BC06)'\n\
  \    ),\n    regex.icontains(body.html.raw,\n                    '(background-color:|background:|bgcolor=)(.)?#(00a4ef|0078d7|8bb737|04a5f0|059EE4|05A6F0)'\n\
  \    ),\n    regex.icontains(body.html.raw,\n                    '(background-color:|background:|bgcolor=)(.)?#(ffb900|ffba07|f4bc41|F2B108|FFBA08)'\n\
  \    ),\n  )\n  // fuzzy approach\n  or 4 of (\n    regex.icontains(body.html.raw,\n\
  \                    'rgb\\((2[1-4][0-9]|250),\\s?(7[0-9]|8[0-9]|9[0-3]),\\s?(3[0-9]|4[0-9]|5[0-3])\\\
  )'\n    ),\n    regex.icontains(body.html.raw,\n                    'rgb\\((12[0-9]|13[0-9]),\\\
  s?(18[0-9]|190),\\s?([0-9]|10)\\)'\n    ),\n    regex.icontains(body.html.raw,\n\
  \                    'rgb\\(([0-9]|1[0-5]),\\s?(16[0-5]|166),\\s?(23[0-9]|240)\\\
  )'\n    ),\n    regex.icontains(body.html.raw,\n                    'rgb\\((25[0-5]),\\\
  s?(18[5-9]|19[0-9]),\\s?([0-9]|10)\\)'\n    )\n  )\n)\n\n// suspicious content\n\
  and (\n  // current thread is empty, but an image attachment is branded as microsoft.\n\
  \  // common in image as content\n  (\n    body.current_thread.text == \"\"\n  \
  \  and any(attachments,\n            .file_type in $file_types_images\n        \
  \    and any(ml.logo_detect(.).brands,\n                    strings.starts_with(.name,\
  \ \"Microsoft\")\n            )\n    )\n  )\n  or (\n    strings.ilike(body.plain.raw,\n\
  \                  \"*password*\",\n                  \"*document*\",\n        \
  \          \"*voicemail*\",\n                  \"*cache*\",\n                  \"\
  *fax*\",\n                  \"*storage*\",\n                  \"*quota*\",\n   \
  \               \"*message*\"\n    )\n    and strings.ilike(body.plain.raw,\n  \
  \                    \"*terminated*\",\n                      \"*review*\",\n  \
  \                    \"*expire*\",\n                      \"*click*\",\n       \
  \               \"*view*\",\n                      \"*exceed*\",\n             \
  \         \"*clear*\",\n                      \"*only works*\",\n              \
  \        \"*failed*\",\n                      \"*deleted*\",\n                 \
  \     \"*revalidated*\",\n                      \"*renewal*\"\n    )\n  )\n\n  or\
  \ (\n    any(attachments,\n        .file_type in $file_types_images\n        and\
  \ any(file.explode(.),\n                strings.ilike(.scan.ocr.raw,\n         \
  \                     \"*password*\",\n                              \"*document*\"\
  ,\n                              \"*voicemail*\",\n                            \
  \  \"*cache*\",\n                              \"*fax*\",\n                    \
  \          \"*storage*\",\n                              \"*quota*\",\n        \
  \                      \"*messages*\"\n                )\n                and strings.ilike(.scan.ocr.raw,\n\
  \                                  \"*terminated*\",\n                         \
  \         \"*review*\",\n                                  \"*expire*\",\n     \
  \                             \"*click*\",\n                                  \"\
  *view*\",\n                                  \"*exceed*\",\n                   \
  \               \"*clear*\",\n                                  \"*only works*\"\
  ,\n                                  \"*failed*\",\n                           \
  \       \"*deleted*\"\n                )\n        )\n    )\n  )\n  or (\n    any(file.explode(beta.message_screenshot()),\n\
  \        strings.ilike(.scan.ocr.raw,\n                      \"*password*\",\n \
  \                     \"*document*\",\n                      \"*voicemail*\",\n\
  \                      \"*cache*\",\n                      \"*fax*\",\n        \
  \              \"*storage*\",\n                      \"*quota*\",\n            \
  \          \"*messages*\"\n        )\n        and strings.ilike(.scan.ocr.raw,\n\
  \                          \"*terminated*\",\n                          \"*review*\"\
  ,\n                          \"*expire*\",\n                          \"*click*\"\
  ,\n                          \"*view*\",\n                          \"*exceed*\"\
  ,\n                          \"*clear*\",\n                          \"*only works*\"\
  ,\n                          \"*failed*\",\n                          \"*deleted*\"\
  ,\n                          \"*revalidated*\",\n                          \"*renewal*\"\
  \n        )\n    )\n  )\n  or (\n    any(ml.nlu_classifier(body.current_thread.text).intents,\n\
  \        .name == \"cred_theft\" and .confidence in~ (\"medium\", \"high\")\n  \
  \  )\n    or any(attachments,\n           .file_type in $file_types_images\n   \
  \        and any(file.explode(.),\n                   any(ml.nlu_classifier(.scan.ocr.raw).intents,\n\
  \                       .name == \"cred_theft\"\n                       and .confidence\
  \ in (\"medium\", \"high\")\n                   )\n           )\n    )\n  )\n)\n\
  and sender.email.domain.root_domain not in (\n  \"bing.com\",\n  \"microsoft.com\"\
  ,\n  \"microsoftonline.com\",\n  \"microsoftproject.com\",\n  \"microsoftstoreemail.com\"\
  ,\n  \"microsoftsupport.com\",\n  \"microsoft365.com\",\n  \"office.com\",\n  \"\
  office365.com\",\n  \"onedrive.com\",\n  \"sharepointonline.com\",\n  \"yammer.com\"\
  ,\n)\n\n// negate legitimate Office 365 bouncebacks\nand not (\n    length(attachments)\
  \ > 0\n    and all(attachments,\n        .content_type in (\"message/delivery-status\"\
  , \"message/rfc822\")\n    )\n    and (sender.email.local_part in ('postmaster',\
  \ 'mailer-daemon'))\n)\n\n// negate Microsoft \"welcome to the X group\" notifications\n\
  and not (\n  headers.auth_summary.dmarc.pass\n  and length(attachments) == 6\n \
  \ and length(filter(attachments,\n                    strings.istarts_with(.file_name,\
  \ \"GuestWelcomeEmail\")\n             )\n  ) == 5\n  and length(filter(body.links,\n\
  \                    (\n                      .href_url.domain.domain not in (\n\
  \                        \"outlook.office365.com\",\n                        \"\
  aka.ms\",\n                        \"go.microsoft.com\"\n                      )\n\
  \                    )\n                    and not .href_url.domain.domain == sender.email.domain.domain\n\
  \             )\n  ) == 0\n  and subject.subject == strings.replace_confusables(subject.subject)\n\
  )\n\n// negate org domains unless they fail DMARC authentication\nand (\n  (\n \
  \   sender.email.domain.root_domain in $org_domains\n    and (\n      not headers.auth_summary.dmarc.pass\n\
  \      // MS quarantine digest emails from an org domain are router \"internally\"\
  \ to MS, therefore, there is no authentication information\n      or not (\n   \
  \     headers.auth_summary.dmarc.pass is null\n        and all(headers.domains,\n\
  \                .root_domain in (\"outlook.com\", \"office365.com\")\n        )\n\
  \        // typical emails from freemail Outlook accounts are from prod.outlook.com\n\
  \        and strings.ends_with(headers.message_id, \"protection.outlook.com>\")\n\
  \      )\n    )\n  )\n  or sender.email.domain.root_domain not in $org_domains\n\
  )\n\n// negate highly trusted sender domains unless they fail DMARC authentication\n\
  and (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n\
  \    and not headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain\
  \ not in $high_trust_sender_root_domains\n)\nand (\n  not profile.by_sender().solicited\n\
  \  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n\
  \  )\n)\nand not profile.by_sender().any_false_positives\n\n// exclude marketing\
  \ jargon from ms partners\nand not regex.icontains(body.current_thread.text,\n \
  \                       '(schedul(e|ing)|set up).{0,20}(call|meeting|demo|zoom|conversation|time|tool|discussion)|book.{0,10}(meeting|demo|call|slot|time)|connect.{0,12}(with\
  \ me|phone|email)|my.{0,10}(calendar|cal)|reserve.{0,10}s[pl]ot|break the ice|want\
  \ to know more?|miss your chance|if you no longer wish|if you no longer want|if\
  \ you wish to opt out|low-code (development|approach|solution|journey|platform)|(?:invite|virtual).{0,30}(webinar|presentation)'\n\
  )"
tactics_and_techniques:
- Free file host
- Image as content
- 'Impersonation: Brand'
- Social engineering
tags:
- Mimecast Hard to Fix
type: rule
