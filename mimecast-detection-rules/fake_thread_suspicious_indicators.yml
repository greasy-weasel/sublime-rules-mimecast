attack_types:
- BEC/Fraud
- Credential Phishing
- Spam
description: Fake thread contains suspicious indicators, which can lead to BEC, credential
  phishing, and other undesirable outcomes.
detection_methods:
- Content analysis
- Header analysis
- Natural Language Understanding
- Sender analysis
id: c2e18a57-1f52-544f-bb6d-a578e286cf89
name: Fake thread with suspicious indicators
severity: medium
source: "type.inbound\n// fake thread check\nand (\n  (\n    (\n      strings.istarts_with(subject.subject,\
  \ \"RE:\")\n      or strings.istarts_with(subject.subject, \"FW:\")\n      or strings.istarts_with(subject.subject,\
  \ \"FWD:\")\n      or regex.imatch(subject.subject,\n                      '(\\\
  [[^\\]]+\\]\\s?){0,3}(re|fwd?|automat.*)\\s?:.*'\n      )\n    )\n  )\n  // fake\
  \ thread, but no indication in the subject line\n  // current_thread pulls the recent\
  \ thread, but the full body contains the fake \"original\" email\n  or (\n    not\
  \ (\n      (\n        strings.istarts_with(subject.subject, \"RE:\")\n        or\
  \ strings.istarts_with(subject.subject, \"R:\")\n        or strings.istarts_with(subject.subject,\
  \ \"ODG:\")\n        or strings.istarts_with(subject.subject, \"\u7B54\u590D:\"\
  )\n        or strings.istarts_with(subject.subject, \"AW:\")\n        or strings.istarts_with(subject.subject,\
  \ \"TR:\")\n        or strings.istarts_with(subject.subject, \"FWD:\")\n      )\n\
  \    )\n    and any([body.current_thread.text, body.html.display_text, body.plain.raw],\n\
  \            3 of (\n              strings.icontains(., \"from:\"),\n          \
  \    strings.icontains(., \"to:\"),\n              strings.icontains(., \"sent:\"\
  ),\n              strings.icontains(., \"date:\"),\n              strings.icontains(.,\
  \ \"cc:\"),\n              strings.icontains(., \"subject:\")\n            )\n \
  \   )\n    and (\n      length(body.current_thread.text) + 100 < length(body.html.display_text)\n\
  \    )\n  )\n)\n\n// negating bouncebacks\nand not any(attachments,\n          \
  \  .content_type in (\"message/delivery-status\", \"message/rfc822\")\n)\n// negating\
  \ Google Calendar invites\nand (\n  (\n    headers.return_path.domain.domain is\
  \ not null\n    and headers.return_path.domain.domain != 'calendar-server.bounces.google.com'\n\
  \  )\n  or headers.return_path.domain.domain is null\n)\n\nand (\n  length(headers.references)\
  \ == 0\n  or headers.in_reply_to is null\n)\n\n// and not solicited\nand not profile.by_sender().solicited\n\
  and 4 of (\n  // language attempting to engage\n  (\n    any(ml.nlu_classifier(body.current_thread.text).entities,\n\
  \        .name == \"request\"\n    )\n    and any(ml.nlu_classifier(body.current_thread.text).entities,\n\
  \            .name == \"financial\"\n    )\n  ),\n\n  // invoicing language\n  (\n\
  \    any(ml.nlu_classifier(body.current_thread.text).tags, .name == \"invoice\"\
  )\n    or any(ml.nlu_classifier(body.current_thread.text).entities,\n          \
  \ .text == \"invoice\"\n    )\n  ),\n\n  // urgency request\n  any(ml.nlu_classifier(body.current_thread.text).entities,\
  \ .name == \"urgency\"),\n\n  // cred_theft detection\n  any(ml.nlu_classifier(body.current_thread.text).intents,\n\
  \      .name == \"cred_theft\" and .confidence in~ (\"medium\", \"high\")\n  ),\n\
  \n  // commonly abused sender TLD\n  strings.ilike(sender.email.domain.tld, \"*.jp\"\
  ),\n\n  // headers traverse abused TLD\n  any(headers.domains, strings.ilike(.tld,\
  \ \"*.jp\")),\n\n  // known suspicious pattern in the URL path\n  any(body.links,\
  \ regex.match(.href_url.path, '\\/[a-z]{3}\\d[a-z]')),\n\n  // link display text\
  \ is in all caps\n  any(body.links, regex.match(.display_text, '[A-Z ]+')),\n\n\
  \  // display name contains an email\n  regex.contains(sender.display_name, '[a-z0-9]+@[a-z]+'),\n\
  \n  // Sender domain is empty\n  sender.email.domain.domain == \"\",\n\n  // sender\
  \ domain matches no body domains\n  all(body.links,\n       not(strings.ends_with(.href_url.query_params,sender.email.domain.root_domain))\n\
  \  ),\n\n  // body contains name of VIP\n  (\n    any($org_vips, strings.icontains(body.html.inner_text,\
  \ .display_name))\n    or any($org_vips, strings.icontains(body.plain.raw, .display_name))\n\
  \  ),\n\n  // new body domain\n  any(body.links, network.whois(.href_url.domain).days_old\
  \ < 30),\n\n  // new sender domain\n  network.whois(sender.email.domain).days_old\
  \ < 30,\n\n  // new sender\n  profile.by_sender().days_known < 7,\n\n  // excessive\
  \ whitespace\n  (\n    regex.icontains(body.html.raw, '((<br\\s*/?>\\s*){20,}|\\\
  n{20,})')\n    or regex.icontains(body.html.raw, '(<p[^>]*>\\s*<br\\s*/?>\\s*</p>\\\
  s*){30,}')\n    or regex.icontains(body.html.raw,\n                       '(<p class=\"\
  .*?\"><span style=\".*?\"><o:p>&nbsp;</o:p></span></p>\\s*){30,}'\n    )\n    or\
  \ regex.icontains(body.html.raw, '(<p>&nbsp;</p>\\s*){7,}')\n    or regex.icontains(body.html.raw,\
  \ '(<p>&nbsp;</p><br>\\s*){7,}')\n    or regex.icontains(body.html.raw, '(<p[^>]*>\\\
  s*&nbsp;<br>\\s*</p>\\s*){5,}')\n    or regex.icontains(body.html.raw, '(<p[^>]*>&nbsp;</p>\\\
  s*){7,}')\n  ),\n\n  // body contains recipient SLD\n  any(recipients.to,\n    \
  \  strings.icontains(body.current_thread.text, .email.domain.sld)\n  )\n)\n\n//\
  \ negate highly trusted sender domains unless they fail DMARC authentication\nand\
  \ (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n\
  \    and not headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain\
  \ not in $high_trust_sender_root_domains\n)\nand not profile.by_sender().any_messages_benign"
tactics_and_techniques:
- Evasion
- Social engineering
tags:
- Attack surface reduction
- Mimecast Hard to Fix
type: rule
