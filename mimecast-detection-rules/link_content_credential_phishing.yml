attack_types:
- Credential Phishing
description: |-
  Message contains credential theft language and a link to a credential phishing page from an unknown sender.
  We use Link Analysis in aggressive mode to increase our chances of scanning.
detection_methods:
- Computer Vision
- Sender analysis
- URL analysis
- URL screenshot
id: f0c95bb7-afeb-5c8d-a654-74b5e026007f
name: Credential phishing content and link (untrusted sender)
severity: high
source: |-
  type.inbound
  and (
    any(ml.nlu_classifier(body.current_thread.text).intents,
        .name == "cred_theft" and .confidence in ("medium", "high")
    )
    // embedded in an image attachment
    // note: don't use message_screenshot() for now
    // because it's not limited to current_thread and may FP
    or any(attachments,
           .file_type in $file_types_images
           and any(file.explode(.),
                   any(ml.nlu_classifier(.scan.ocr.raw).intents,
                       .name == "cred_theft" and .confidence in ("medium", "high")
                   )
           )
    )
  )
  and any(body.links,
           not(any(["outlook.com"], strings.ends_with(..href_url.query_params,.)))
          and .href_url.domain.domain != "play.google.com"
          and ml.link_analysis(., mode="aggressive").effective_url.domain.domain != "play.google.com"
          and ml.link_analysis(., mode="aggressive").credphish.disposition == "phishing"
          and ml.link_analysis(., mode="aggressive").credphish.confidence in (
            "medium",
            "high"
          )
          and not  strings.ends_with(.href_url.query_params,"c3reservations.com")
  )
  and (
    (
      profile.by_sender_email().prevalence in ("new", "outlier")
      and not profile.by_sender_email().solicited
    )
    or (
      profile.by_sender_email().any_messages_malicious_or_spam
      and not profile.by_sender_email().any_false_positives
    )
  )

  // negate docusign 'via' messages
  and not (
    any(headers.hops,
        any(.fields,
            .name == "X-Api-Host" and strings.ends_with(.value, "docusign.net")
        )
    )
    and strings.contains(sender.display_name, "via")
  )

  // negate docusign originated emails
  and not any(headers.hops,
              regex.imatch(.received.server.raw, ".+.docusign.(net|com)")
  )

  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
tactics_and_techniques:
- Social engineering
tags:
- Mimecast Needs Fix
type: rule
