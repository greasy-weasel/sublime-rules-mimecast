attack_types:
- Credential Phishing
description: |-
  Attack impersonating a DocuSign request for signature.
detection_methods:
- Header analysis
- Sender analysis
- URL analysis
id: 4d29235c-08b9-5f9b-950e-60b05c4691fb
name: 'Brand impersonation: DocuSign'
references:
- https://playground.sublimesecurity.com?id=2d2c6472-fabb-4952-b902-573a6294aa2f
severity: high
source: "type.inbound\nand (\n  // orgs can have docusign.company.com\n  strings.ilike(sender.email.email,\
  \ '*docusign.net*', '*docusign.com*')\n\n  // if the above is true, you'll see a\
  \ \"via Docusign\"\n  or strings.ilike(sender.display_name, '*docusign*')\n\n  //\
  \ detects 1 character variations,\n  // such as DocuSlgn (with an \"L\" instead\
  \ of an \"I\")\n  or strings.ilevenshtein(sender.display_name, \"docusign\") ==\
  \ 1\n  or strings.ilike(sender.display_name, \"*docuonline*\", \"*via *signature*\"\
  )\n  or (\n    strings.istarts_with(body.html.inner_text, \"docusign\")\n    and\
  \ not strings.istarts_with(body.current_thread.text, \"docusign\")\n  )\n  or (\n\
  \    (\n      (\n        regex.icontains(sender.display_name, '\\bdocu\\b')\n  \
  \      and strings.icontains(sender.display_name, 'sign')\n      )\n      or (\n\
  \        regex.icontains(subject.subject, '\\bdocu\\b')\n        and strings.icontains(subject.subject,\
  \ 'sign')\n      )\n    )\n    and any(body.links, .display_text in~ (\"Review Document\"\
  , \"View Document\", \"View Completed Document\"))\n    // negate replies/forwards\
  \ which involve a legit docusign message-id format\n    and not any(headers.references,\n\
  \                strings.iends_with(., '@docusign.net')\n                and regex.imatch(.,\
  \ '[0-9a-f]{32}@docusign.net')\n    )\n\n  )\n  or (\n    (\n      regex.icontains(body.html.raw,\
  \ '<font size=\"[0-9]\"[^\\>]*>DocuSign</font>')\n      or regex.icontains(body.html.raw,\
  \ '\\nDocu(?:<[^\\>]+>\\s*)+Sign<')\n      or regex.icontains(body.html.raw,\n \
  \                        '<span[^>]*style=\"[^\"]*\">DocuSign<\\/span>'\n      )\n\
  \      or regex.icontains(body.html.raw,\n                         '<span[^>]*style=\"\
  [^\"]*\">(Docu|D(?:ocu?)?)<\\/span><span[^>]*style=\"[^\"]*\">(Sign|S(?:ign?)?)<\\\
  /span>'\n      )\n      or regex.icontains(body.html.raw, '<strong>DocuSign</strong>')\n\
  \      or regex.icontains(body.html.raw, '<div class=\"logo\">DocuSign</div>')\n\
  \      or regex.icontains(body.html.raw,\n                         'D&#917540;&#917540;o&#917540;&#917540;c\uFE00\
  uS&#917540;&#917540;i\uFE00gn'\n      )\n    )\n    and (\n      regex.icontains(body.html.raw,\
  \ 'background:\\s*rgb\\(30,\\s*76,\\s*161\\)')\n      or regex.icontains(body.html.raw,\n\
  \                         'background-color:\\s*rgb\\(30,\\s*76,\\s*161\\)'\n  \
  \    )\n      or regex.icontains(body.html.raw,\n                         'background-color:\\\
  s*rgb\\(61,\\s*170,\\s*73\\)'\n      )\n      or regex.icontains(body.html.raw,\n\
  \                         '<div[^>]*BACKGROUND-COLOR: #1e4ca1[^>]*>',\n        \
  \                 '<td[^>]*BACKGROUND-COLOR: #1e4ca1[^>]*>',\n                 \
  \        '<table[^>]*background-color:\\s*#1e4ca1'\n      )\n      or regex.icontains(body.html.raw,\
  \ 'background-color:#214e9f;')\n      or regex.icontains(body.html.raw, 'background-color:#3260a7')\n\
  \      or regex.icontains(body.html.raw, 'background-color:#0056b3')\n      or regex.icontains(body.html.raw,\
  \ 'BACKGROUND-COLOR:#1e4ca1')\n      or regex.icontains(body.html.raw, 'background-color:#214395')\n\
  \      or regex.icontains(body.html.raw,\n                         '<table[^>]*style=\"\
  [^\"]*background:\\s*#1E4CA1[^\"]*\"[^>]*>(.*?)<\\/table>'\n      )\n      or regex.icontains(body.html.raw,\
  \ '<title>Document.{0,50}</title>')\n      or any(body.links, regex.icontains(.display_text,\
  \ 'view.{0,3}doc'))\n      or any(body.links, regex.contains(.display_text, '\\\
  bDOCUMENT'))\n    )\n  )\n)\n\n// identifies the main CTA in the email, eg \"Review\
  \ now\" or \"Review document\"\n// this should always be a known docusign domain,\n\
  // even with branded docusign subdomains\nand (\n  any(body.links,\n      // we've\
  \ observed invisible characters in the display name\n      // such as U+034f(look\
  \ carefully): \"Revi\u034Few Now\"\n      (\n        strings.ilevenshtein(.display_text,\
  \ \"Review Now\") <= 3\n        or (\n          strings.icontains(.display_text,\
  \ \"Review\")\n          and not strings.icontains(.display_text, \"Review Us\"\
  )\n        )\n        or strings.icontains(.display_text, \"Now\")\n        or strings.icontains(.display_text,\
  \ \"document\")\n        or strings.icontains(.display_text, \"docusign\")\n   \
  \   )\n      and not  any([\"docusign.com\", \"docusign.net\"], strings.ends_with(..href_url.query_params,.))\n\
  \      and not (\n         strings.ends_with(.href_url.query_params,\"mimecastprotect.com\"\
  )\n        and (\n          .href_url.query_params is not null\n          and (\n\
  \            regex.icontains(.href_url.query_params,\n                         \
  \   'domain=(?:\\w+.)?docusign.net'\n            )\n            or regex.icontains(.href_url.query_params,\n\
  \                               'domain=(?:\\w+.)?docusign.com'\n            )\n\
  \          )\n        )\n      )\n  )\n  // Suspicious attachment\n  or any(attachments,\n\
  \         (\n           .file_extension in~ (\"html\", \"htm\", \"shtml\", \"dhtml\"\
  )\n           or .file_extension in~ $file_extensions_common_archives\n        \
  \   or .file_type == \"html\"\n           or .content_type == \"text/html\"\n  \
  \       )\n         and 1 of (\n           (\n             regex.icontains(file.parse_html(.).raw,\
  \ '\\s{0,}<script.*')\n             and regex.icontains(file.parse_html(.).raw,\
  \ \"</script>\")\n           ),\n           strings.ilike(file.parse_html(.).raw,\n\
  \                         \"*createElement*\",\n                         \"*appendChild*\"\
  ,\n                         \"*createObjectURL*\"\n           ),\n           strings.icount(file.parse_html(.).raw,\
  \ \"/*\") > 10,\n           any($free_subdomain_hosts, strings.icontains(..file_name,\
  \ .))\n         )\n  )\n)\n\n// negate highly trusted sender domains unless they\
  \ fail DMARC authentication\nand (\n  coalesce(sender.email.domain.root_domain in\
  \ $high_trust_sender_root_domains\n           and not headers.auth_summary.dmarc.pass,\n\
  \           false\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n\
  )\n\n// adding negation for messages originating from docusigns api\n// and the\
  \ sender.display.name contains \"via\"\nand not (\n  any(headers.hops,\n      any(.fields,\n\
  \          .name == \"X-Api-Host\" and strings.ends_with(.value, \"docusign.net\"\
  )\n      )\n  )\n  and strings.contains(sender.display_name, \"via\")\n)\nand (\n\
  \  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n\
  \    and not profile.by_sender().any_false_positives\n  )\n)"
tactics_and_techniques:
- 'Impersonation: Brand'
- Lookalike domain
- Social engineering
- Spoofing
tags:
- Mimecast Hard to Fix
type: rule
